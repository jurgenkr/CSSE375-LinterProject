plugins {
    id 'java'
    id 'application'
    id 'jacoco'
}

group 'org.example'
version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

ext {
    firstLinterMainClass = 'example.MyFirstLinter'
}

dependencies {
    implementation 'org.ow2.asm:asm:9.3',
            'org.ow2.asm:asm-tree:9.3',
            'org.ow2.asm:asm-analysis:9.3'

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.2'

    // Use JUnit test framework
    testImplementation 'junit:junit:4.13.2'

    // Use EasyMock framework
    testCompile 'junit:junit:4.13.2', 'org.easymock:easymock:4.3'

    // https://mvnrepository.com/artifact/org.json/json
    implementation 'org.json:json:20220320'
}

application {
    mainClassName = firstLinterMainClass
}

test {
    useJUnitPlatform()
}

jacoco {
    toolVersion = "0.7.5.+"
}
jacocoTestReport {
    dependsOn test
    group = "Reporting"
    description = "Generate Jacoco coverage reports after running tests."
    reports {
        xml.enabled true
        csv.enabled false
        html.enabled true
    }
}

test.finalizedBy(jacocoTestReport)

task codeCoverageInfo (dependsOn: jacocoTestReport) {
    ext.srcFile = file("${reportsDir}/jacoco/test/jacocoTestReport.xml")

    doLast {
        println "Transforming source file."

        def parser = new XmlParser()
        parser.setFeature("http://apache.org/xml/features/disallow-doctype-decl",
                false);
        parser.setFeature("http://apache.org/xml/features/nonvalidating/load-external-dtd", false);
        parser.setFeature("http://xml.org/sax/features/namespaces", false)

        def reportNode = parser.parse(srcFile)
        reportNode.children().each {
            if(it.name() == 'counter') {
                String type = it.@type
                float missed = it.@missed as float
                float covered = it.@covered as float
                float percentage = covered / (missed + covered) * 100
                println "Code Coverage[$type]: $percentage%"
            }
        }
    }
}
jacocoTestReport.finalizedBy(codeCoverageInfo)